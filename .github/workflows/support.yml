name: Client Support
on:
  discussion:
    types: [created, edited, answered]
  workflow_dispatch:

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Check Discussion Category from Event
        id: category-event
        if: github.event_name == 'discussion'
        run: |
          CATEGORY="${{ github.event.discussion.category.name }}"
          if [[ "$CATEGORY" =~ ^(Members|FAQ|Q&A|Announcements|Bug Reports & Issues)$ ]]; then
            echo "MATCH=true" >> $GITHUB_ENV
            echo "SINGLE_CATEGORY=$CATEGORY" >> $GITHUB_ENV
          else
            echo "MATCH=false" >> $GITHUB_ENV
          fi
      
      - name: Checkout repository for manual runs
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
          
      - name: Fetch All Discussions for Manual Runs
        if: github.event_name == 'workflow_dispatch'
        id: fetch-discussions
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
        run: |
          echo "Fetching discussions..."
          gh api graphql -f query='
          {
            organization(login: "CryptoVersus") {
              repository(name: "cryptoversus-io") {
                discussions(first: 50) {
                  nodes {
                    id
                    title
                    url
                    body
                    category { name }
                    labels(first: 10) { nodes { name } }
                  }
                }
              }
            }
          }' > discussions.json
          
          echo "Discussions fetched. Processing..."
          echo "BATCH_PROCESS=true" >> $GITHUB_ENV

      - name: Process Batch Discussions
        if: env.BATCH_PROCESS == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACTIONS_TOKEN }}
          script: |
            const fs = require('fs');
            const discussionsData = JSON.parse(fs.readFileSync('discussions.json', 'utf8'));
            const discussions = discussionsData.data.organization.repository.discussions.nodes;
            
            const relevantCategories = [
              'Announcements', 'Bug Reports & Issues', 'Members', 'FAQ', 'Q&A'
            ];
            
            const projectId = "PVT_kwDOCLSZrs4AsSM-";
            
            for (const discussion of discussions) {
              const category = discussion.category.name;
              
              if (relevantCategories.includes(category)) {
                console.log(`Processing discussion: ${discussion.title}`);
                
                // Check if discussion is already in project
                const checkQuery = `
                query($projectId: ID!, $query: String!) {
                  project: node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 5, query: $query) {
                        nodes {
                          id
                          content {
                            ... on Discussion {
                              url
                            }
                          }
                        }
                      }
                    }
                  }
                }`;
                
                const checkVariables = {
                  projectId: projectId,
                  query: discussion.title
                };
                
                try {
                  const checkResult = await github.graphql(checkQuery, checkVariables);
                  const items = checkResult.project.items.nodes;
                  
                  const existingItem = items.find(item => 
                    item.content && 
                    item.content.url === discussion.url
                  );
                  
                  if (existingItem) {
                    console.log(`Discussion already in project: ${discussion.title}`);
                    continue;
                  }
                  
                  // Add discussion to project
                  const addQuery = `
                  mutation($projectId: ID!, $contentId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId,
                      contentId: $contentId
                    }) {
                      item {
                        id
                      }
                    }
                  }`;
                  
                  const addVariables = {
                    projectId: projectId,
                    contentId: discussion.id
                  };
                  
                  const result = await github.graphql(addQuery, addVariables);
                  console.log(`Added discussion to project: ${discussion.title}`);
                  
                  // Update status field based on category
                  const itemId = result.addProjectV2ItemById.item.id;
                  const team = getCategoryTeam(category);
                  
                  // Set team field and status field
                  await updateProjectFields(github, projectId, itemId, category, team);
                  
                } catch (error) {
                  console.error(`Error processing discussion ${discussion.title}: ${error.message}`);
                }
              }
            }
            
            // Helper function to get team based on category
            function getCategoryTeam(category) {
              switch(category) {
                case "Bug Reports & Issues": return "Support & Documentation";
                case "FAQ": return "Support & Documentation";
                case "Announcements": return "Media & Outreach"; 
                case "Q&A": return "Support & Documentation";
                case "Members": return "Marketing & Growth";
                default: return "";
              }
            }
            
            // Helper function to update project fields
            async function updateProjectFields(github, projectId, itemId, category, team) {
              // First, get field IDs from the project
              const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }`;
              
              const fieldsVariables = {
                projectId: projectId
              };
              
              const fieldsResult = await github.graphql(fieldsQuery, fieldsVariables);
              const fields = fieldsResult.node.fields.nodes;
              
              // Find Status field and Team field
              const statusField = fields.find(field => field.name === "Status" && field.options);
              const teamField = fields.find(field => field.name === "Team" && field.options);
              
              if (statusField) {
                // Determine status based on category
                let statusName = "New"; // Default
                if (category === "Bug Reports & Issues") statusName = "Investigating";
                
                const statusOption = statusField.options.find(option => option.name === statusName);
                
                if (statusOption) {
                  const updateStatusQuery = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const updateStatusVariables = {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: statusField.id,
                    optionId: statusOption.id
                  };
                  
                  await github.graphql(updateStatusQuery, updateStatusVariables);
                  console.log(`Set status to "${statusName}"`);
                }
              }
              
              if (teamField && team) {
                const teamOption = teamField.options.find(option => option.name === team);
                
                if (teamOption) {
                  const updateTeamQuery = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const updateTeamVariables = {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: teamField.id,
                    optionId: teamOption.id
                  };
                  
                  await github.graphql(updateTeamQuery, updateTeamVariables);
                  console.log(`Assigned to team "${team}"`);
                }
              }
            }

      - name: Add Single Discussion to Project
        if: github.event_name == 'discussion' && env.MATCH == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const discussion = context.payload.discussion;
            const category = process.env.SINGLE_CATEGORY;
            const projectId = "PVT_kwDOCLSZrs4AsSM-";
            
            // Add discussion to project
            const addQuery = `
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {
                projectId: $projectId,
                contentId: $contentId
              }) {
                item {
                  id
                }
              }
            }`;
            
            const addVariables = {
              projectId: projectId,
              contentId: discussion.node_id
            };
            
            try {
              const result = await github.graphql(addQuery, addVariables);
              console.log(`Added discussion to project: ${discussion.title}`);
              
              // Get team based on category
              let team = "";
              switch(category) {
                case "Bug Reports & Issues": team = "Support & Documentation"; break;
                case "FAQ": team = "Support & Documentation"; break;
                case "Announcements": team = "Media & Outreach"; break;
                case "Q&A": team = "Support & Documentation"; break;
                case "Members": team = "Marketing & Growth"; break;
              }
              
              // Item ID for field updates
              const itemId = result.addProjectV2ItemById.item.id;
              
              // Get field IDs from the project
              const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }`;
              
              const fieldsVariables = {
                projectId: projectId
              };
              
              const fieldsResult = await github.graphql(fieldsQuery, fieldsVariables);
              const fields = fieldsResult.node.fields.nodes;
              
              // Find Status field and Team field
              const statusField = fields.find(field => field.name === "Status" && field.options);
              const teamField = fields.find(field => field.name === "Team" && field.options);
              
              if (statusField) {
                // Determine status based on category
                let statusName = "New"; // Default
                if (category === "Bug Reports & Issues") statusName = "Investigating";
                
                const statusOption = statusField.options.find(option => option.name === statusName);
                
                if (statusOption) {
                  const updateStatusQuery = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const updateStatusVariables = {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: statusField.id,
                    optionId: statusOption.id
                  };
                  
                  await github.graphql(updateStatusQuery, updateStatusVariables);
                  console.log(`Set status to "${statusName}"`);
                }
              }
              
              if (teamField && team) {
                const teamOption = teamField.options.find(option => option.name === team);
                
                if (teamOption) {
                  const updateTeamQuery = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }`;
                  
                  const updateTeamVariables = {
                    projectId: projectId,
                    itemId: itemId,
                    fieldId: teamField.id,
                    optionId: teamOption.id
                  };
                  
                  await github.graphql(updateTeamQuery, updateTeamVariables);
                  console.log(`Assigned to team "${team}"`);
                }
              }
              
            } catch (error) {
              console.error(`Error processing discussion: ${error.message}`);
            }
            
  update_project_item:
    runs-on: ubuntu-latest
    if: github.event_name == 'discussion' && github.event.action == 'answered'
    steps:
      - name: Update Project Item When Discussion is Answered
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const discussion = context.payload.discussion;
            const projectId = "PVT_kwDOCLSZrs4AsSM-";
            
            // Find the discussion in the project
            const findQuery = `
            query($projectId: ID!, $query: String!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  items(first: 5, query: $query) {
                    nodes {
                      id
                      content {
                        ... on Discussion {
                          id
                          url
                        }
                      }
                    }
                  }
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }`;
            
            const findVariables = {
              projectId: projectId,
              query: discussion.title
            };
            
            try {
              const result = await github.graphql(findQuery, findVariables);
              const items = result.node.items.nodes;
              const fields = result.node.fields.nodes;
              
              const item = items.find(item => 
                item.content && 
                item.content.url === discussion.html_url
              );
              
              if (item) {
                // Find the Status field
                const statusField = fields.find(field => field.name === "Status");
                if (statusField) {
                  // Find the Resolved option
                  const resolvedOption = statusField.options.find(option => 
                    option.name === "Resolved" || option.name === "Completed" || option.name === "Done"
                  );
                  
                  if (resolvedOption) {
                    // Update the status to Resolved/Completed/Done
                    const updateQuery = `
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { 
                          singleSelectOptionId: $optionId
                        }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }`;
                    
                    const updateVariables = {
                      projectId: projectId,
                      itemId: item.id,
                      fieldId: statusField.id,
                      optionId: resolvedOption.id
                    };
                    
                    await github.graphql(updateQuery, updateVariables);
                    console.log(`Updated discussion status to ${resolvedOption.name}: ${discussion.title}`);
                  }
                }
              } else {
                console.log(`Discussion not found in project: ${discussion.title}`);
              }
            } catch (error) {
              console.error(`Error updating discussion: ${error.message}`);
            }
